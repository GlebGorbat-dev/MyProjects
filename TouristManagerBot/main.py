import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import database
import api_services
import urllib.parse
import re
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

BOT_TOKEN = "8050268291:AAGYI6GN-YJ0xbzWiE3nWHRcly0jvJ2gvGg"
bot = telebot.TeleBot(BOT_TOKEN)

user_states = {}  # –§–æ—Ä–º–∞—Ç: {telegram_id: {'state': 'awaiting_email_register', 'email': '...'}}
# –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: awaiting_email_register, awaiting_password_register, awaiting_email_login, awaiting_password_login

def get_maps_url(name, city, coords=None):
    if coords:
        return f"https://www.google.com/maps?q={coords}"
    query = urllib.parse.quote(f"{name} {city}")
    return f"https://www.google.com/maps?q={query}"

def create_auth_menu():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register"),
        InlineKeyboardButton("–í—Ö–æ–¥", callback_data="login")
    )
    return markup

def create_city_menu():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    cities = sorted(api_services.CITY_COUNTRY.keys())
    for i in range(0, len(cities), 2):
        row = []
        row.append(InlineKeyboardButton(cities[i], callback_data=f"city_{cities[i]}"))
        if i + 1 < len(cities):
            row.append(InlineKeyboardButton(cities[i + 1], callback_data=f"city_{cities[i + 1]}"))
        markup.add(*row)
    return markup

def create_menu(city):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        InlineKeyboardButton("üå§Ô∏è –ü–æ–≥–æ–¥–∞", callback_data=f"weather_{city}"),
        InlineKeyboardButton("üí∏ –í–∞–ª—é—Ç–∞", callback_data=f"currency_{city}"),
        InlineKeyboardButton("üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data=f"sights_{city}"),
        InlineKeyboardButton("üè® –û—Ç–µ–ª—å", callback_data=f"hotel_{city}"),
        InlineKeyboardButton("üìã –í—Å—ë —Å—Ä–∞–∑—É", callback_data=f"all_{city}"),
        InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="back_to_cities")
    )
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    telegram_id = message.from_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ:", reply_markup=create_auth_menu())
    user_states[telegram_id] = {'state': None, 'email': None}

@bot.message_handler(content_types=['text'])
def process_text(message):
    telegram_id = message.from_user.id
    state_data = user_states.get(telegram_id, {'state': None, 'email': None})
    state = state_data.get('state')
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç {telegram_id}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

    if state == 'awaiting_email_register':
        email = message.text.strip()
        if not re.match(r'^[a-zA-Z0-9._%+-]+@gmail\.com$', email):
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (@gmail.com):")
            return
        user_states[telegram_id] = {'state': 'awaiting_password_register', 'email': email}
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
    elif state == 'awaiting_password_register':
        password = message.text.strip()
        if len(password) < 6:
            bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        email = state_data['email']
        if database.register_user(telegram_id, email, password):
            user_states[telegram_id] = {'state': None, 'email': None}
            bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=create_city_menu())
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å email {email}")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≠—Ç–æ—Ç Telegram ID –∏–ª–∏ email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.")
            user_states[telegram_id] = {'state': None, 'email': None}
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_auth_menu())
    elif state == 'awaiting_email_login':
        email = message.text.strip()
        if not re.match(r'^[a-zA-Z0-9._%+-]+@gmail\.com$', email):
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (@gmail.com):")
            return
        user_states[telegram_id] = {'state': 'awaiting_password_login', 'email': email}
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    elif state == 'awaiting_password_login':
        password = message.text.strip()
        email = state_data['email']
        if database.authenticate_user(telegram_id, email, password):
            user_states[telegram_id] = {'state': None, 'email': None}
            bot.send_message(message.chat.id, "–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=create_city_menu())
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤–æ—à–µ–ª —Å email {email}")
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            user_states[telegram_id] = {'state': None, 'email': None}
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_auth_menu())
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        telegram_id = call.from_user.id
        data = call.data
        logging.info(f"Callback –æ—Ç {telegram_id}: {data}")

        if data == "register":
            user_states[telegram_id] = {'state': 'awaiting_email_register', 'email': None}
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (@gmail.com):")
            bot.answer_callback_query(call.id)
        elif data == "login":
            user_states[telegram_id] = {'state': 'awaiting_email_login', 'email': None}
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (@gmail.com):")
            bot.answer_callback_query(call.id)
        else:
            if not database.is_user_registered(telegram_id):
                bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ:", reply_markup=create_auth_menu())
                bot.answer_callback_query(call.id)
                return

            if data.startswith("city_"):
                city = data.split("_")[1]
                if city in api_services.CITY_COUNTRY:
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {city}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?",
                        reply_markup=create_menu(city)
                    )
                else:
                    bot.answer_callback_query(call.id, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            elif data == "back_to_cities":
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
                    reply_markup=create_city_menu()
                )
            else:
                action, city = data.split("_")
                country_code = api_services.CITY_COUNTRY.get(city, "Unknown")
                sights = database.get_sights(city)
                logging.info(f"–î–µ–π—Å—Ç–≤–∏–µ: {action}, –ì–æ—Ä–æ–¥: {city}")

                if action == "weather":
                    weather = api_services.get_weather(city)
                    response = f"**–ü–æ–≥–æ–¥–∞ –≤ {city} –Ω–∞ –¥–µ–Ω—å:**\n{weather}"
                    bot.send_message(call.message.chat.id, response, parse_mode="Markdown", reply_markup=create_menu(city))
                elif action == "currency":
                    currency = api_services.get_currency(country_code) if country_code != "Unknown" else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞"
                    response = f"**–í–∞–ª—é—Ç–∞ —Å—Ç—Ä–∞–Ω—ã:** {currency} (–ø–æ –∫—É—Ä—Å—É –∫ USD)"
                    bot.send_message(call.message.chat.id, response, parse_mode="Markdown", reply_markup=create_menu(city))
                elif action == "sights":
                    if sights:
                        sight1, sight2, _, sight1_coords, sight2_coords, _, sight1_photo, sight2_photo = sights
                        caption1 = f"**{sight1}** ([–Ω–∞ –∫–∞—Ä—Ç–µ]({get_maps_url(sight1, city, sight1_coords)}))"
                        if sight1_photo:
                            bot.send_photo(call.message.chat.id, sight1_photo, caption=caption1, parse_mode="Markdown")
                        else:
                            bot.send_message(call.message.chat.id, caption1, parse_mode="Markdown")
                        caption2 = f"**{sight2}** ([–Ω–∞ –∫–∞—Ä—Ç–µ]({get_maps_url(sight2, city, sight2_coords)}))"
                        if sight2_photo:
                            bot.send_photo(call.message.chat.id, sight2_photo, caption=caption2, parse_mode="Markdown")
                        else:
                            bot.send_message(call.message.chat.id, caption2, parse_mode="Markdown")
                        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_menu(city))
                    else:
                        response = "–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                        bot.send_message(call.message.chat.id, response, parse_mode="Markdown", reply_markup=create_menu(city))
                elif action == "hotel":
                    if sights:
                        _, _, hotel, _, _, hotel_coords, _, _ = sights
                        response = f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ—Ç–µ–ª—å –≤ {city}:**\n{hotel} ([–Ω–∞ –∫–∞—Ä—Ç–µ]({get_maps_url(hotel, city, hotel_coords)}))"
                        bot.send_message(call.message.chat.id, response, parse_mode="Markdown", reply_markup=create_menu(city))
                elif action == "all":
                    weather = api_services.get_weather(city)
                    currency = api_services.get_currency(country_code) if country_code != "Unknown" else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞"
                    if sights:
                        sight1, sight2, hotel, sight1_coords, sight2_coords, hotel_coords, sight1_photo, sight2_photo = sights
                        response = (
                            f"**–ü–æ–≥–æ–¥–∞ –≤ {city} –Ω–∞ –Ω–µ–¥–µ–ª—é:**\n{weather}\n\n"
                            f"**–í–∞–ª—é—Ç–∞ —Å—Ç—Ä–∞–Ω—ã:** {currency} (–ø–æ –∫—É—Ä—Å—É –∫ USD)\n\n"
                        )
                        bot.send_message(call.message.chat.id, response, parse_mode="Markdown")
                        caption1 = f"**{sight1}** ([–Ω–∞ –∫–∞—Ä—Ç–µ]({get_maps_url(sight1, city, sight1_coords)}))"
                        if sight1_photo:
                            bot.send_photo(call.message.chat.id, sight1_photo, caption=caption1, parse_mode="Markdown")
                        else:
                            bot.send_message(call.message.chat.id, caption1, parse_mode="Markdown")
                        caption2 = f"**{sight2}** ([–Ω–∞ –∫–∞—Ä—Ç–µ]({get_maps_url(sight2, city, sight2_coords)}))"
                        if sight2_photo:
                            bot.send_photo(call.message.chat.id, sight2_photo, caption=caption2, parse_mode="Markdown")
                        else:
                            bot.send_message(call.message.chat.id, caption2, parse_mode="Markdown")
                        response = f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ—Ç–µ–ª—å:**\n{hotel} ([–Ω–∞ –∫–∞—Ä—Ç–µ]({get_maps_url(hotel, city, hotel_coords)}))"
                        bot.send_message(call.message.chat.id, response, parse_mode="Markdown", reply_markup=create_menu(city))
                    else:
                        response = (
                            f"**–ü–æ–≥–æ–¥–∞ –≤ {city} –Ω–∞ –Ω–µ–¥–µ–ª—é:**\n{weather}\n\n"
                            f"**–í–∞–ª—é—Ç–∞ —Å—Ç—Ä–∞–Ω—ã:** {currency} (–ø–æ –∫—É—Ä—Å—É –∫ USD)\n\n"
                            "–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–µ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                        )
                        bot.send_message(call.message.chat.id, response, parse_mode="Markdown", reply_markup=create_menu(city))

            bot.answer_callback_query(call.id)
    except Exception as e:
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_query –¥–ª—è {telegram_id}: {e}")

if __name__ == '__main__':
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
